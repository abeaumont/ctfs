import sat.

multiply(D, S1, S2) =>
  foreach (I in 1 .. 64)
    foreach (J in 1 .. 64)
      S1[I] #= J #=> D[I] #= S2[J]
    end,
  end.

multiply2(D, S1, S2) =>
  foreach (I in 1 .. 64)
    foreach (J in 1 .. 64)
      if (S1[I] == J) then
        D[I] #= S2[J]
      end,
    end,
  end.

inverse(D, S) =>
  foreach (I in 1 .. 64)
    foreach (J in 1 .. 64)
        S[I] #= J #<=> D[J] #= I
    end,
  end.

encrypt(P1, P2, K, KI, E1, E2) =>
  V = [new_array(64) : I in 1..9],
  foreach (X in V)
    X :: 1..64,
    all_different(X)
  end,
  [T1, T2, T3, T4, T5, T6, T7, R1, R2] = V,
  multiply2(T1, P1, KI),
  multiply(T2, T1, P2),
  multiply(T3, T2, K),
  multiply(T4, P2, KI),
  multiply(T5, T4, T3),
  multiply(R1, T5, K),
  multiply(T6, T3, KI),
  multiply(T7, T6, R1),
  multiply(R2, T7, K),
  foreach (I in 1..64)
    R1[I] #= E1[I],
    R2[I] #= E2[I],
  end.

main() =>
  P11 = {48, 27, 39, 5, 49, 32, 26, 23, 19, 22, 28, 63, 60, 18, 35, 59, 15, 52, 11, 0, 12, 50, 46, 13, 25, 47, 14, 54, 42, 16, 29, 37, 31, 4, 21, 61, 40, 6, 30, 62, 2, 10, 45, 56, 3, 36, 17, 8, 55, 20, 7, 43, 9, 51, 53, 58, 44, 34, 57, 1, 33, 41, 38, 24},
  P12 = {28, 34, 61, 25, 57, 56, 59, 7, 6, 27, 62, 0, 54, 10, 36, 23, 21, 38, 35, 40, 30, 45, 60, 55, 22, 5, 52, 29, 11, 17, 44, 31, 63, 42, 41, 51, 20, 3, 13, 14, 46, 37, 2, 48, 32, 26, 15, 33, 19, 49, 50, 4, 8, 47, 43, 16, 1, 53, 39, 12, 24, 18, 58, 9},
  E11 = {5, 13, 36, 51, 3, 63, 59, 53, 45, 52, 37, 10, 39, 15, 41, 16, 57, 49, 34, 21, 40, 2, 44, 55, 6, 24, 43, 23, 48, 25, 8, 60, 26, 62, 19, 12, 33, 7, 29, 30, 27, 18, 0, 46, 61, 11, 50, 4, 32, 38, 54, 17, 14, 35, 42, 9, 47, 20, 28, 31, 56, 58, 1, 22},
  E12 = {25, 45, 37, 52, 27, 26, 9, 55, 40, 15, 59, 30, 3, 13, 62, 8, 17, 53, 47, 56, 6, 20, 11, 0, 24, 21, 39, 33, 19, 32, 41, 44, 43, 5, 18, 60, 58, 12, 23, 42, 46, 22, 36, 16, 28, 63, 38, 10, 49, 4, 14, 1, 34, 57, 7, 54, 48, 29, 2, 31, 35, 61, 51, 50},
  P21 = {27, 11, 22, 17, 49, 33, 48, 12, 14, 6, 62, 53, 41, 5, 24, 13, 21, 46, 36, 61, 29, 60, 58, 43, 16, 47, 45, 20, 39, 37, 19, 31, 10, 42, 44, 54, 51, 15, 0, 34, 35, 18, 8, 26, 30, 23, 3, 40, 32, 52, 28, 1, 7, 2, 25, 59, 38, 9, 56, 50, 4, 57, 63, 55},
  P22 = {50, 62, 22, 26, 33, 21, 35, 23, 53, 45, 47, 24, 41, 10, 38, 31, 2, 15, 55, 32, 34, 1, 25, 49, 52, 6, 37, 58, 7, 19, 29, 17, 16, 3, 4, 11, 63, 8, 27, 0, 59, 18, 54, 12, 61, 39, 13, 28, 20, 51, 36, 42, 9, 56, 46, 60, 30, 5, 48, 57, 43, 40, 14, 44},
  E21 = {63, 61, 38, 9, 30, 51, 39, 33, 45, 24, 0, 5, 17, 6, 23, 20, 49, 22, 18, 29, 37, 59, 28, 31, 36, 26, 2, 13, 53, 52, 34, 19, 25, 44, 16, 27, 43, 55, 8, 42, 12, 21, 62, 46, 7, 4, 56, 35, 41, 10, 3, 11, 57, 50, 15, 14, 48, 40, 60, 1, 47, 32, 54, 58},
  E22 = {44, 31, 39, 23, 24, 26, 32, 57, 35, 55, 17, 3, 42, 7, 33, 14, 30, 47, 21, 56, 50, 62, 58, 11, 60, 36, 37, 63, 20, 2, 15, 25, 5, 34, 0, 22, 28, 45, 40, 38, 46, 41, 9, 59, 1, 8, 27, 49, 52, 4, 6, 16, 10, 48, 43, 29, 12, 13, 54, 51, 18, 19, 53, 61},
  foreach (X in [P11, P12, E11, E12, P21, P22, E21, E22])
    foreach (I in 1..64)
      X[I] := X[I] + 1
    end,
  end,
  [K, KI] = [new_array(64), new_array(64)],
  K :: 1..64,
  KI :: 1..64,
  all_different(K),
  all_different(KI),
  inverse(KI, K),
  encrypt(P11, P12, K, KI, E11, E12),
  encrypt(P21, P22, K, KI, E21, E22),
  solve(K),
  [I - 1: I in K].println().
